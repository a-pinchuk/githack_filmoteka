{"mappings":"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","sources":["src/index.js","src/js/fetchAndRenderPopularFilm.js","src/js/render/renderPopularFilm.js","src/js/filterHeader.js","src/js/requests/searchFilms.js","src/js/pagination.js"],"sourcesContent":["// Стили\n\n// Скрипты\nimport './js/api/apiVars';\nimport './js/api/fetch';\nimport './js/references/ref';\nimport './js/fetchAndRenderPopularFilm';\nimport './js/filterHeader';\nimport './js/render/modalStudents';\nimport './js/modal';\nimport './js/localStorage';\nimport './js/requests/searchFilms';\nimport './js/render/renderSearchFilms';\nimport './js/scrollToTop';\nimport './js/pagination';\n// Переключатель темы\nimport './js/switcher';\nimport './js/authentication/authentication';\n","import { fetchTrendedFilms, fetchFilmGenres } from './api/fetch';\nimport { renderPopularFilms } from './render/renderPopularFilm';\nimport { ref } from './references/ref';\nimport { loaderHide } from './loader';\nexport {fetchAndRenderPopularFilm}\n\nfetchAndRenderPopularFilm();\n\nasync function fetchAndRenderPopularFilm(page) {\n  try {\n    ref.loader.style.display = 'flex';\n    const image = await fetchTrendedFilms(page);\n    const genres = await fetchFilmGenres();\n    const data = image.data.results;\n    const genresID = genres.data.genres;\n\n    renderPopularFilms(ref, data, genresID);\n    loaderHide();\n  } catch (error) {\n    console.log(error);\n  }\n}\n","export function renderPopularFilms(ref, data, genres) {\n  const markup = data\n    .map(el => {\n      const genreId = el.genre_ids;\n      const movieGenres = compareGenresId(genres, genreId);\n      return `\n      <li class=\"photo__card\" data-modal-open id=\"${el.id}\">\n            <img src=\"https://image.tmdb.org/t/p/w500/${el.poster_path}\" alt=\"${\n        el.title\n      }\" \"loading=\"lazy\" class=\"movie__image\" width=\"500\" height=\"750\"/>\n            <span class=\"movie__rating\">${el.vote_average.toFixed(1)}</span>\n          <div class=\"movie__info\">\n            <p class=\"film__title\">${el.title}</p>\n            <div class=\"movie__details\">\n            <p class=\"movie__genre\">${movieGenres}</p>\n            <p class=\"movie__year\">| ${el.release_date.slice(0, 4)}</p>\n          </div>\n          </div>\n      </li>`;\n    })\n    .join('');\n  // ref.galleryList.insertAdjacentHTML('beforeend', markup);\n  ref.galleryList.innerHTML = markup;\n}\n\nfunction compareGenresId(allGenres, filmGenre) {\n  let arrayOfGenres = [];\n  allGenres.forEach(el => {\n    if (filmGenre.includes(el.id)) {\n      arrayOfGenres.push(el.name);\n    }\n  });\n  if (arrayOfGenres.length > 3) {\n    arrayOfGenres = arrayOfGenres.splice(0, 2).join(', ') + ', Other';\n    return arrayOfGenres;\n  }\n\n  return arrayOfGenres.join(', ');\n}\n","// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import { fetchTrendedFilms } from './api/fetch';\n// import { fetchSearchedFilms } from './api/fetch';\nimport { fetchFilmById } from './api/fetch';\nimport { fetchFilteredFilms, fetchFilmGenres } from './api/fetch';\nimport { renderPopularFilms } from './render/renderPopularFilm';\nimport { renderFilmsByIdForLibrary } from './render/renderFilmByIdForLibrary';\n// import { renderFilms } from './render/renderHTML';\nimport { ref } from './references/ref';\nimport { loaderHide } from './loader';\n// import { options, pagination } from './pagination';\nimport { LOCALSTORAGE_WATCHED, LOCALSTORAGE_QUEUE } from './api/apiVars';\n\nref.filterBtn.addEventListener('click', onActiveFilter);\nref.form.addEventListener('change', onChangeInput);\n\nfunction onActiveFilter(e) {\n  // console.log(e.target);\n  ref.filter.classList.toggle('filter-form');\n  ref.filter.classList.toggle('filter-form-activ');\n}\nfunction onChangeInput(e) {\n  const property = e.target.getAttribute('name');\n  const value = e.target.value;\n  fetchAndRenderFilm(property, value);\n  // console.log(fetchAndRenderPopularFilm(o.genres));\n}\n\nasync function fetchAndRenderFilm(property, value) {\n  try {\n    ref.loader.style.display = 'flex';\n    const image = await fetchFilteredFilms(property, value);\n    const genres = await fetchFilmGenres();\n    const data = image.data.results;\n    const genresID = genres.data.genres;\n    ref.galleryList.innerHTML = '';\n\n    renderPopularFilms(ref, data, genresID);\n    loaderHide();\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction onActive(e) {\n  e.target.nextElementSibling.classList.toggle('visually-hidden');\n  // e.target.nextElementSibling.classList.add (\"filter-group-active\");\n  // ref.filter.classList.toggle (\"visually-hidden\");\n}\n","import { createMarkUp } from '../render/renderSearchFilms';\nimport { fetchSearchedFilms } from '../api/fetch';\nimport { ref } from '../references/ref';\nimport { Notify } from 'notiflix';\nimport { PAGE } from '../api/apiVars';\nimport { renderPopularFilms } from '../render/renderPopularFilm';\nimport { loaderHide } from '../loader';\nimport { showPaginationSearched } from '../pagination';\nexport { renderSearchFilms };\n\nlet searchQuery = '';\nref.form.addEventListener('submit', onCLickSubmit);\n\nfunction onCLickSubmit(e) {\n  e.preventDefault();\n  searchQuery = ref.input.value.trim();\n  ref.loader.style.display = 'flex';\n  if (searchQuery === '') {\n    loaderHide();\n    ref.alertMessage.textContent =\n      'Searching starts after providing data to search!';\n    Notify.warning('Searching starts after providing data to search!');\n    return;\n  }\n  if (searchQuery.length > 0) {\n    ref.alertMessage.textContent = '';\n    ref.input.value = '';\n    renderSearchFilms().then(res => {\n      if(res !== undefined) {\n        showPaginationSearched(res.data.total_pages);\n      }\n      \n    });\n  } else {\n    renderPopularFilms();\n  }\n}\n\nasync function renderSearchFilms(page) {\n  try {\n    const promis = await fetchSearchedFilms(searchQuery, page);\n\n    const data = promis.data.results;\n    //  const paginationData = promis.data;\n\n    if (data.length === 0) {\n      loaderHide();\n      ref.alertMessage.textContent =\n        'Search result not successful. Enter the correct movie name!';\n      return Notify.warning(\n        'Search result not successful. Enter the correct movie name!'\n      );\n    }\n    ref.alertMessage.textContent = '';\n    ref.loader.style.display = 'flex';\n    clearGallery();\n    // paginationPage(paginationData);\n    createMarkUp(ref, data);\n    loaderHide();\n    return promis;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction clearGallery() {\n  ref.galleryList.innerHTML = '';\n}\n","// import Pagination from 'tui-pagination';\n// import 'tui-pagination/dist/tui-pagination.css';\n// import { renderSearchFilms } from './requests/searchFilms';\n// import { ref } from './references/ref';\n// import { darkmode } from './switcher';\n// import { fetchAndRenderPopularFilm } from './fetchAndRenderPopularFilm';\n// import { renderSearchFilms } from './requests/searchFilms';\n// export { showPagination };\n\n\n// const containerPopular = document.getElementById('pagination');\n// const containerSearch = document.getElementById('pagination-search')\n\n// containerSearch.style.display = 'none'\n\n\n\n// if (darkmode) {\n//   ref.paginationRef.classList.add('pagination-btns-dark-theme');\n// }\n\n// const options = {\n//   totalItems: 200,\n//   itemsPerPage: 1,\n//   visiblePages: 5,\n//   page: 1,\n//   centerAlign: true,\n//   firstItemClassName: 'pagination-first-button',\n//   lastItemClassName: 'pagination-last-button',\n\n//   template: {\n//     page: '<a href=\"#\" class=\"pagination-page-button\">{{page}}</a>',\n//     currentPage: '<a class=\"pagination-active-button\">{{page}}</a>',\n//     moveButton:\n//       '<a href=\"#\" class=\"pagination-next-button\">' +\n//       '<span class=\"pag-ico-{{type}}\">{{type}}</span>' +\n//       '</a>',\n//     disabledMoveButton:\n//       '<span class=\"pagination-disabled-button\">' +\n//       '<span class=\"pag-ico-{{type}}\">{{type}}</span>' +\n//       '</span>',\n//     moreButton:\n//       '<a href=\"#\" class=\"pagination-more-button\">' +\n//       '<span class=\"pag-ico-more\"> </span>' +\n//       '</a>',\n//   },\n// };\n\n\n// //пагінація для трендів\n// const pagination = new Pagination(containerPopular, options)\n\n// pagination.on('afterMove', onPaginationMove);\n\n// function onPaginationMove({ page }) { \n//   ref.galleryList.innerHTML = ''\n//   fetchAndRenderPopularFilm(page)\n//   // renderSearchFilms(page)\n//    window.scrollTo({\n//     top: 0,\n//     behavior: 'smooth',\n//   });\n// }\n\n// function showPagination(totalPages) {\n//   pagination.setTotalItems(totalPages);\n//   pagination.movePageTo(options.page);\n//   ref.paginationRef.style.display = 'flex';\n// }\n\n\n// function showPaginationTrended(totalPages) {\n//   pagination.setTotalItems(totalPages)\n//   pagination.movePageTo(options.page)\n//   ref.paginationRef.style.display = 'flex'\n//   ref.paginationSearchRef.style.display = 'none'\n// }\n\n\n// //пагінація для пошуку \n\n// const paginationSearch = new Pagination(containerSearch, options)\n\n// paginationSearch.on('afterMove', onPaginationSearchMove)\n\n// function onPaginationSearchMove ({page}) {\n//   renderSearchFilms(page)\n//    window.scrollTo({\n//     top: 0,\n//     behavior: 'smooth',\n//   });\n// }\n\n// function showPaginationSearched(totalPages) {\n//   paginationSearch.setTotalItems(totalPages)\n//   paginationSearch.movePageTo(options.page)\n//   ref.paginationRef.style.display = 'none'\n//   ref.paginationSearchRef.style.display = 'flex'\n// }\n\n// // пагінація для watched\n\nimport Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\n\nimport { renderSearchFilms } from './requests/searchFilms';\nimport { ref } from './references/ref';\nimport { darkmode } from './switcher';\nimport { fetchAndRenderPopularFilm } from './fetchAndRenderPopularFilm';\nexport {showPaginationTrended}\nexport {showPaginationSearched}\n\n\n\nconst containerPopular = document.getElementById('pagination');\nconst containerSearch = document.getElementById('pagination-search')\n\ncontainerSearch.style.display = 'none'\n\nif(darkmode) {\n  ref.paginationRef.classList.add('pagination-btns-dark-theme')\n  ref.paginationSearchRef.classList.add('pagination-btns-dark-theme')\n}\n\n\nconst options = {\n  totalItems: 200,\n  itemsPerPage: 1,\n  visiblePages: 5,\n  page: 1,\n  centerAlign: true,\n  firstItemClassName: 'pagination-first-button',\n  lastItemClassName: 'pagination-last-button',\n\n  template: {\n    page: '<a href=\"#\" class=\"pagination-page-button\">{{page}}</a>',\n    currentPage: '<a class=\"pagination-active-button\">{{page}}</a>',\n    moveButton:\n      '<a href=\"#\" class=\"pagination-next-button\">' +\n        '<span class=\"pag-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"pagination-disabled-button\">' +\n        '<span class=\"pag-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n      moreButton:\n      '<a href=\"#\" class=\"pagination-more-button\">' +\n        '<span class=\"pag-ico-more\"> </span>' +\n      '</a>'\n\n  }}\n//пагінація для трендів\nconst pagination = new Pagination(containerPopular, options)\n\npagination.on('afterMove', onPaginationMove);\n\nfunction onPaginationMove({ page }) { \n  ref.galleryList.innerHTML = ''\n  fetchAndRenderPopularFilm(page)\n  // renderSearchFilms(page)\n   window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n}\n\nfunction showPaginationTrended(totalPages) {\n  pagination.setTotalItems(totalPages)\n  pagination.movePageTo(options.page)\n  ref.paginationRef.style.display = 'flex'\n  ref.paginationSearchRef.style.display = 'none'\n}\n\n\n//пагінація для пошуку \n\nconst paginationSearch = new Pagination(containerSearch, options)\n\npaginationSearch.on('afterMove', onPaginationSearchMove)\n\nfunction onPaginationSearchMove ({page}) {\n  ref.galleryList.innerHTML = ''\n  renderSearchFilms(page)\n   window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n}\n\nfunction showPaginationSearched(totalPages) {\n  paginationSearch.setTotalItems(totalPages)\n  paginationSearch.movePageTo(options.page)\n  ref.paginationRef.style.display = 'none'\n  ref.paginationSearchRef.style.display = 'flex'\n}"],"names":["parcelRequire","$bpxeT","$32d10e5c4081750b$export$14c15ac6e78b66e1","ref","data","genres","markup","map","el","genreId","genre_ids","movieGenres","allGenres","filmGenre","arrayOfGenres","forEach","includes","id","push","name","length","splice","join","$32d10e5c4081750b$var$compareGenresId","concat","poster_path","title","vote_average","toFixed","release_date","slice","galleryList","innerHTML","$744246f7d39501a4$export$8a805042a4b718d5","page","$744246f7d39501a4$var$_fetchAndRenderPopularFilm","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","image","genresID","$9oodp","loader","style","display","$5YnpJ","fetchTrendedFilms","_ctx","sent","fetchFilmGenres","results","$kvC6y","loaderHide","console","log","t0","$1fbed62f2189bf96$var$_fetchAndRenderFilm","property","value","fetchFilteredFilms","filterBtn","addEventListener","e","filter","classList","toggle","form","target","getAttribute","$1fbed62f2189bf96$var$fetchAndRenderFilm","$1VFfL","$dfaf77c789ce7a24$var$containerPopular","document","getElementById","$dfaf77c789ce7a24$var$containerSearch","$78qpV","darkmode","paginationRef","add","paginationSearchRef","$dfaf77c789ce7a24$var$options","totalItems","itemsPerPage","visiblePages","centerAlign","firstItemClassName","lastItemClassName","template","currentPage","moveButton","disabledMoveButton","moreButton","$dfaf77c789ce7a24$var$pagination","on","param","window","scrollTo","top","behavior","$dfaf77c789ce7a24$var$paginationSearch","$a412d4442f664cf1$export$d12e25a4edbd6dcb","$a412d4442f664cf1$var$searchQuery","$a412d4442f664cf1$var$_renderSearchFilms","promis","fetchSearchedFilms","alertMessage","textContent","$iU1Pc","Notify","warning","$a412d4442f664cf1$var$clearGallery","$eOhzM","createMarkUp","preventDefault","input","trim","then","res","totalPages","undefined","total_pages","setTotalItems","movePageTo"],"version":3,"file":"index.224908ca.js.map"}